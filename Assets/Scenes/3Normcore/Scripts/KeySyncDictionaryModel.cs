using Normal.Realtime;
using Normal.Realtime.Serialization;

namespace Normcore
{
    [RealtimeModel]
    public partial class KeySyncDictionaryModel
    {
        [RealtimeProperty(3, true, true)] private RealtimeDictionary<KeySyncModel> _realtimeDictionary;
    }
}

/* ----- Begin Normal Autogenerated Code ----- */
namespace Normcore {
    public partial class KeySyncDictionaryModel : RealtimeModel {
        public Normal.Realtime.Serialization.RealtimeDictionary<KeySyncModel> realtimeDictionary {
            get => _realtimeDictionary;
        }
        
        public enum PropertyID : uint {
            RealtimeDictionary = 3,
        }
        
        #region Properties
        
        private ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<KeySyncModel>> _realtimeDictionaryProperty;
        
        #endregion
        
        public KeySyncDictionaryModel() : base(null) {
            RealtimeModel[] childModels = new RealtimeModel[1];
            
            _realtimeDictionary = new Normal.Realtime.Serialization.RealtimeDictionary<KeySyncModel>();
            childModels[0] = _realtimeDictionary;
            
            SetChildren(childModels);
            
            _realtimeDictionaryProperty = new ModelProperty<Normal.Realtime.Serialization.RealtimeDictionary<KeySyncModel>>(3, _realtimeDictionary);
        }
        
        protected override int WriteLength(StreamContext context) {
            var length = 0;
            length += _realtimeDictionaryProperty.WriteLength(context);
            return length;
        }
        
        protected override void Write(WriteStream stream, StreamContext context) {
            var writes = false;
            writes |= _realtimeDictionaryProperty.Write(stream, context);
            if (writes) InvalidateContextLength(context);
        }
        
        protected override void Read(ReadStream stream, StreamContext context) {
            var anyPropertiesChanged = false;
            while (stream.ReadNextPropertyID(out uint propertyID)) {
                var changed = false;
                switch (propertyID) {
                    case (uint) PropertyID.RealtimeDictionary: {
                        changed = _realtimeDictionaryProperty.Read(stream, context);
                        break;
                    }
                    default: {
                        stream.SkipProperty();
                        break;
                    }
                }
                anyPropertiesChanged |= changed;
            }
            if (anyPropertiesChanged) {
                UpdateBackingFields();
            }
        }
        
        private void UpdateBackingFields() {
            _realtimeDictionary = realtimeDictionary;
        }
        
    }
}
/* ----- End Normal Autogenerated Code ----- */

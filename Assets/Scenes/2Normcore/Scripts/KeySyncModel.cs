using Enums;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class KeySyncModel
{
    [RealtimeProperty(1, false, true)] private string _keyName;
    [RealtimeProperty(2, false, true)] private EKeyState _keyState;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class KeySyncModel : RealtimeModel {
    public string keyName {
        get {
            return _keyNameProperty.value;
        }
        set {
            if (_keyNameProperty.value == value) return;
            _keyNameProperty.value = value;
            InvalidateUnreliableLength();
            FireKeyNameDidChange(value);
        }
    }
    
    public Enums.EKeyState keyState {
        get {
            return (Enums.EKeyState) _keyStateProperty.value;
        }
        set {
            if (_keyStateProperty.value == (uint) value) return;
            _keyStateProperty.value = (uint) value;
            InvalidateUnreliableLength();
            FireKeyStateDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(KeySyncModel model, T value);
    public event PropertyChangedHandler<string> keyNameDidChange;
    public event PropertyChangedHandler<Enums.EKeyState> keyStateDidChange;
    
    public enum PropertyID : uint {
        KeyName = 1,
        KeyState = 2,
    }
    
    #region Properties
    
    private UnreliableProperty<string> _keyNameProperty;
    
    private UnreliableProperty<uint> _keyStateProperty;
    
    #endregion
    
    public KeySyncModel() : base(null) {
        _keyNameProperty = new UnreliableProperty<string>(1, _keyName);
        _keyStateProperty = new UnreliableProperty<uint>(2, (uint) _keyState);
    }
    
    private void FireKeyNameDidChange(string value) {
        try {
            keyNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireKeyStateDidChange(Enums.EKeyState value) {
        try {
            keyStateDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _keyNameProperty.WriteLength(context);
        length += _keyStateProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _keyNameProperty.Write(stream, context);
        writes |= _keyStateProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.KeyName: {
                    changed = _keyNameProperty.Read(stream, context);
                    if (changed) FireKeyNameDidChange(keyName);
                    break;
                }
                case (uint) PropertyID.KeyState: {
                    changed = _keyStateProperty.Read(stream, context);
                    if (changed) FireKeyStateDidChange(keyState);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _keyName = keyName;
        _keyState = keyState;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
